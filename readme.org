* Scale svg from center with css animation
** ¿Cómo uso animateTransform en un SVG para escalar un objeto desde el punto central en lugar de la esquina superior izquierda?
Cambie su transformación de escala y use aditivo="sum", luego aplique una transformación adicional que traduzca el círculo al centro de la imagen. Entonces, en lugar de definir la forma en el centro de la imagen, defina su centro como 0 0 y luego use el atributo de transformación para traducirlo a 50, 50 (el centro exacto de su imagen en particular).


#+begin_src html

      <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100px" height="100px">
        <circle style="fill:blue;" cx="0" cy="0" r="45" transform="translate(50 50)">
          <animateTransform attributeName="transform"
                            type="scale"
                            additive="sum"
                            from="0 0"
                            to="1 1"
                            begin="0s"
                            dur="1s"
                            repeatCount="indefinite"
          />
        </circle>
      </svg>

#+end_src

Aquí hay otro ejemplo que usa las etiquetas defs y use para reutilizar la definición del círculo:
#+begin_src html
      <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100px" height="100px">
        <defs>
          <circle id="def-circle" style="fill:#ff2cb7;" cx="0" cy="0" r="45" />
        </defs>

        <use xlink:href="#def-circle" transform="translate(50 50)">
          <animateTransform attributeName="transform"
                            type="scale"
                            additive="sum"
                            from="0 0"
                            to="1 1"
                            beg="0s"
                            dur="1s"
                            repeatCount="indefinite" />
        </use>
      </svg>
#+end_src

También podría haberlo hecho con la ayuda de los estilos CSS y la propiedad transform-origin.
El beneficio es que no tiene que calcular coordenadas y trasladar sus objetos.
#+begin_src html
            <svg viewBox="0 0 100 100" width="100px" height="100px">
              <path id="circle-origin" d="M 50, 50 m -75, 0 a 75,75 0 1,0 150,0 a 75,75 0 1,0 -150,0">
                <animateTransform
                  attributeName="transform"
                  type="scale"
                  from="0.4"
                  to="0.7"
                  dur="5s"
                  repeatCount="indefinite"/>
              </path>
            </svg>
#+end_src

#+begin_src css
#circle-origin {
    transform-origin: bottom;
}
#+end_src

En su caso específico, otra forma más sería animar el radio del círculo mismo:
#+begin_src html
      <svg width="100px" height="100px">
        <circle r="0" cx="50" cy="50">
          <animate attributeName="r" from="0" to ="10" begin="1s" dur="300ms" repeatCount="indefinite" fill="freeze" />
      </circle>
      </svg>
#+end_src

Use transform-origin y transform-box.
#+begin_src html
      <div class="circle-example-notes">
      <svg width="100px" height="100px" viewBox="0 0 100 100" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
          <g id="circle-example" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
            <circle id="Oval" fill="#2A2C32" cx="50" cy="50" r="11.5"></circle>
          </g>
      </svg>
      </div>
#+end_src
#+begin_src css
.circle-example-notes {
    width: 100px;
    height: 100px;
    background: rgba(0,0,0,0.2)
}

#circle-example {
    transform: scale(1);
    transform-box: fill-box;
    transform-origin: center;
    /* animation: circle .5s linear 1.3s forwards; */
    animation: circle 5s linear 1.3s infinite;
}

@keyframes circle {
    to {
        transform: scale(4.1);
    }
}
#+end_src

** Rotate
La función de transformación de rotación (<a> [<x> <y>]) especifica una rotación de grados alrededor de un punto dado. Si no se proporcionan los parámetros opcionales x e y, la rotación es sobre el origen del sistema de coordenadas del usuario actual. Si se proporcionan los parámetros opcionales x e y, la rotación es sobre el punto (x, y).
*** Ejemplo 1

#+begin_src html
<svg viewBox="-12 -2 34 14" xmlns="http://www.w3.org/2000/svg">
  <rect x="0" y="0" width="10" height="10" />

  <!-- rotation is done around the point 0,0 -->
  <rect x="0" y="0" width="10" height="10" fill="red" transform="rotate(100)" />

  <!-- rotation is done around the point 10,10 -->
  <rect
    x="0"
    y="0"
    width="10"
    height="10"
    fill="green"
    transform="rotate(100, 10, 10)" />
</svg>
#+end_src
*** Ejemplo 2
#+begin_src html
<svg width="31" height="31">
  <rect x="12" y="-10" width="20" height="20" transform="rotate(45)" />
</svg>
#+end_src
url referencia:
https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Basic_Transformations
https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform
